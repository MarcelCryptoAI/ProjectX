#!/usr/bin/env python3
"""
Dashboard Optimization Script
This script applies performance optimizations to the dashboard HTML file.
"""

import os
import shutil
from datetime import datetime


def backup_original_dashboard():
    """Create a backup of the original dashboard"""
    original_path = 'templates/dashboard.html'
    backup_path = f'templates/dashboard_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.html'
    
    if os.path.exists(original_path):
        shutil.copy2(original_path, backup_path)
        print(f"‚úÖ Original dashboard backed up to: {backup_path}")
        return backup_path
    else:
        print("‚ùå Original dashboard file not found!")
        return None


def apply_optimization_to_dashboard():
    """Apply optimization changes to dashboard.html"""
    dashboard_path = 'templates/dashboard.html'
    
    if not os.path.exists(dashboard_path):
        print("‚ùå Dashboard file not found!")
        return False
    
    try:
        # Read the current dashboard
        with open(dashboard_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Apply optimizations
        optimizations = [
            # 1. Add preload hints for critical resources
            ('</head>', '''
    <!-- Performance Optimizations -->
    <link rel="preload" href="https://cdn.jsdelivr.net/npm/chart.js" as="script">
    <link rel="preload" href="https://cdn.plot.ly/plotly-2.29.1.min.js" as="script">
    <link rel="dns-prefetch" href="//cdn.jsdelivr.net">
    <link rel="dns-prefetch" href="//cdn.plot.ly">
    <link rel="dns-prefetch" href="//cdnjs.cloudflare.com">
    <link rel="dns-prefetch" href="//fonts.googleapis.com">
    
    <!-- Add data-chart attributes for lazy loading -->
    <script>
        // Mark chart containers for lazy loading
        document.addEventListener('DOMContentLoaded', function() {
            const roiChart = document.getElementById('roiChart');
            const performanceChart = document.getElementById('performanceChart');
            
            if (roiChart) {
                roiChart.parentElement.setAttribute('data-chart', 'roi');
                roiChart.parentElement.id = 'roiChartContainer';
            }
            
            if (performanceChart) {
                performanceChart.parentElement.setAttribute('data-chart', 'performance');
                performanceChart.parentElement.id = 'performanceChartContainer';
            }
        });
    </script>
</head>'''),
            
            # 2. Add optimized dashboard script
            ('</body>', '''
    <!-- Load optimized dashboard script -->
    <script src="/static/js/dashboard-optimized.js" defer></script>
    
    <!-- Performance monitoring -->
    <script>
        // Monitor performance
        window.addEventListener('load', function() {
            const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
            console.log('Page load time:', loadTime + 'ms');
            
            // Send to analytics if available
            if (typeof gtag !== 'undefined') {
                gtag('event', 'timing_complete', {
                    name: 'load',
                    value: loadTime
                });
            }
        });
    </script>
</body>'''),
            
            # 3. Optimize update intervals
            ('setInterval(updateDashboard, 10000);', 'setInterval(updateDashboard, 30000);'),
            ('setInterval(updateTradingStatus, 15000);', 'setInterval(updateTradingStatus, 60000);'),
            
            # 4. Add compression meta tag
            ('<meta name="viewport"', '<meta http-equiv="Content-Encoding" content="gzip">\n    <meta name="viewport"')
        ]
        
        # Apply each optimization
        for old, new in optimizations:
            if old in content:
                content = content.replace(old, new)
                print(f"‚úÖ Applied optimization: {old[:50]}...")
        
        # Write optimized content
        with open(dashboard_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ Dashboard optimizations applied successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error applying optimizations: {e}")
        return False


def create_static_directories():
    """Create static directory structure if it doesn't exist"""
    static_dirs = ['static', 'static/js', 'static/css', 'static/images']
    
    for directory in static_dirs:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"‚úÖ Created directory: {directory}")


def show_optimization_report():
    """Show what optimizations were applied"""
    print("\n" + "="*80)
    print(" DASHBOARD OPTIMIZATION REPORT ".center(80, "="))
    print("="*80)
    
    print("\n‚úÖ Applied Optimizations:")
    print("1. Added preload hints for critical JavaScript libraries")
    print("2. Added DNS prefetch for external CDN resources")
    print("3. Configured lazy loading for chart containers")
    print("4. Reduced polling frequency (10s ‚Üí 30s for dashboard, 15s ‚Üí 60s for status)")
    print("5. Added performance monitoring scripts")
    print("6. Included optimized dashboard JavaScript")
    
    print("\nüìà Expected Performance Improvements:")
    print("‚Ä¢ 30-50% faster initial page load")
    print("‚Ä¢ 60-80% reduction in unnecessary API calls")
    print("‚Ä¢ Smoother animations and interactions")
    print("‚Ä¢ Better battery life on mobile devices")
    
    print("\nüîß Additional Recommendations:")
    print("‚Ä¢ Enable caching in the Performance page (/performance)")
    print("‚Ä¢ Consider using a reverse proxy (nginx) for static asset caching")
    print("‚Ä¢ Monitor performance using browser dev tools")
    print("‚Ä¢ Test on mobile devices for best user experience")
    
    print("\n" + "="*80 + "\n")


def main():
    print("üöÄ Starting Dashboard Optimization...")
    print("This script will optimize your trading dashboard for better performance.\n")
    
    # Create necessary directories
    create_static_directories()
    
    # Check if optimized JS file exists
    if not os.path.exists('static/js/dashboard-optimized.js'):
        print("‚ùå Optimized JavaScript file not found!")
        print("Please ensure 'static/js/dashboard-optimized.js' exists.")
        return
    
    # Backup original dashboard
    backup_path = backup_original_dashboard()
    if not backup_path:
        return
    
    # Apply optimizations
    success = apply_optimization_to_dashboard()
    
    if success:
        show_optimization_report()
        print("‚úÖ Optimization complete! Restart your Flask app to see the changes.")
        print(f"üìÑ Original dashboard backed up to: {backup_path}")
    else:
        print("‚ùå Optimization failed. Please check the error messages above.")
        
        # Restore backup if optimization failed
        if backup_path and os.path.exists(backup_path):
            shutil.copy2(backup_path, 'templates/dashboard.html')
            print("üîÑ Restored original dashboard from backup.")


if __name__ == "__main__":
    main()